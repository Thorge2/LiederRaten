{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, useMutation, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: \"http://hemken.ddns.net:4000/graphql\",\n  cache: new InMemoryCache()\n});\nexport const GamesProvider = ({\n  children\n}) => /*#__PURE__*/_jsx(ApolloProvider, {\n  client: client,\n  children: children\n});\nconst GAMES = gql`\n  query Games {\n    games {\n      id\n      name\n      date\n    }\n  }\n`;\nexport const useGames = () => useQuery(GAMES);\nconst DELETE_GAME = gql`\n  mutation DeleteGame($id: ID!) {\n    deleteGame(id: $id)\n  }\n`;\nexport const useDeleteGame = () => useMutation(DELETE_GAME, {\n  update: (cache, {\n    data\n  }) => {\n    cache.modify({\n      fields: {\n        games: existing => {}\n      }\n    });\n  }\n});\nconst GAME = gql`\n  query Game($id: ID!) {\n    game(id: $id) {\n      id\n      name\n      date\n      players {\n        name\n        score\n        color\n      }\n    }\n  }\n`;\nexport const useGame = id => useQuery(GAME, {\n  variables: {\n    id: id\n  }\n});\nconst SAVE_GAME = gql`\n  mutation SaveGame($name: String!, $players: [PlayerInput!]!) {\n    saveGame(name: $name, players: $players) {\n      id\n    }\n  }\n`;\nexport const useSaveGame = () => useMutation(SAVE_GAME, {\n  update: (cache, {\n    data\n  }) => {\n    cache.modify({\n      fields: {\n        games: existing => {}\n      }\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}